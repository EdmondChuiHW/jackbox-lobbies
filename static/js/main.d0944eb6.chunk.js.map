{"version":3,"sources":["GamesSelector.js","createCancelableScheduler.js","useImageTextRecognition.js","Stream.js","makeTwitchApi.js","TwitchApiContext.js","SignedInApp.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","formControl","margin","spacing","GamesSelector","names","selectedNames","onCheckboxChange","classes","FormControl","component","className","FormLabel","FormGroup","row","map","name","FormControlLabel","key","label","control","Checkbox","checked","has","onChange","ev","currentTarget","jobsCount","makeWorkersPool","workerIdToWorker","Map","idleWorkerIds","Set","idleWorkerListenersQueue","head","undefined","tail","length","add","value","node","next","pop","returning","clear","peek","makeQueue","init","workersPoolSize","Promise","all","Array","fill","addWorker","getIdleWorker","id","markWorkerIdBusy","resolve","w","killWorkerId","workerId","skipReplacement","worker","get","delete","terminate","freeWorkerId","listener","workers","values","a","createWorker","workerPath","process","workerBlobURL","corePath","WebAssembly","load","loadLanguage","initialize","setParameters","tessjs_create_hocr","tessjs_create_tsv","set","ImageTextRecognitionContext","React","createContext","ImageTextRecognitionProvider","children","numWorkers","useState","readyScheduler","setReadyScheduler","useEffect","scheduler","jobIdToWorkerId","workersPool","addRecognitionJob","imageLike","options","jobId","recognize","queueJob","createCancelableScheduler","Provider","displayName","root","media","width","height","Stream","stream","gameName","thumbnailUrl","result","setResult","didCancel","fetchImg","useImgFetch","thumbnail_url","blob","imgSrc","useContext","resultPromise","cancelFn","data","useImageTextRecognition","isResultPending","isLikelyLobby","lines","some","l","text","match","twitchStreamUrl","user_name","toLowerCase","Card","style","opacity","order","CardActionArea","href","target","rel","CardMedia","image","title","LinearProgress","CardContent","display","flexDirection","Typography","variant","color","flex","viewer_count","retryCount","url","replace","fetch","cache","resp","ageOfResourceInSeconds","headers","window","URL","createObjectURL","maxAgeInMs","cacheControl","maxAgeStr","URLSearchParams","getMaxAgeInSeconds","resourceCreatedAt","Date","now","getTime","makeTwitchApi","clientId","authToken","makeAuthHeaders","getStreams","gameIds","afterCursor","params","forEach","gameId","append","json","pagination","streams","fetchNext","cursor","getGames","getAuthUrl","location","origin","pathname","handleAuthResponse","token","hash","slice","hasAuth","TwitchApiContext","twitchApi","useTwitchApi","GAME_NAMES","SignedInApp","api","setSelectedNames","games","setGames","gameIdToName","setGameIdToName","setStreams","setFetchNext","size","incGames","handleResult","concat","prev","uniqueIds","g","prevNames","flexWrap","game_id","Button","onClick","position","bottom","items","idToItem","item","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d0944eb6.chunk.js","sourcesContent":["import Checkbox from '@material-ui/core/Checkbox';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport { makeStyles } from '@material-ui/core/styles';\nimport React from \"react\";\n\nconst useStyles = makeStyles((theme) => ({\n  formControl: {\n    margin: theme.spacing(3),\n  },\n}));\n\nexport default function GamesSelector({ names, selectedNames, onCheckboxChange }) {\n  const classes = useStyles();\n\n  return <>\n    <FormControl component=\"fieldset\" className={classes.formControl}>\n      <FormLabel component=\"legend\">Games</FormLabel>\n      <FormGroup row={true}>\n        {names.map(name => (\n          <FormControlLabel\n            key={name}\n            label={name}\n            control={<Checkbox checked={selectedNames.has(name)} onChange={ev => onCheckboxChange && onCheckboxChange(ev.currentTarget)} name={name} />}\n          />\n        ))}\n      </FormGroup>\n    </FormControl>\n  </>;\n}\n","import { createWorker } from \"tesseract.js\";\n\nlet jobsCount = 0;\n\nexport default function createCancelableScheduler({ workersPoolSize = 20 } = {}) {\n  const jobIdToWorkerId = new Map();\n  const workersPool = makeWorkersPool();\n\n  return {\n    async init() {\n      await workersPool.init(workersPoolSize);\n    },\n    addRecognitionJob(imageLike, options, jobId) {\n      jobId = jobId || `job-${jobsCount++}`;\n\n      async function queueJob() {\n        const worker = await workersPool.getIdleWorker();        \n        jobIdToWorkerId.set(jobId, worker.id);\n\n        try {\n          return await worker.recognize(imageLike, options, jobId);\n        } finally {\n          jobIdToWorkerId.delete(jobId);\n          workersPool.freeWorkerId(worker.id);\n        }\n      }\n\n      async function terminateFn() {\n        if (!jobIdToWorkerId.has(jobId)) return;\n\n        const workerId = jobIdToWorkerId.get(jobId);\n        jobIdToWorkerId.delete(jobId);\n        await workersPool.killWorkerId(workerId);\n      }\n\n      return [queueJob(), terminateFn];\n    },\n    async terminate() {\n      jobIdToWorkerId.clear();\n      await workersPool.terminate();\n    },\n  };\n}\n\nfunction makeWorkersPool() {\n  const workerIdToWorker = new Map();\n  const idleWorkerIds = new Set();\n  const idleWorkerListenersQueue = makeQueue();\n\n  return {\n    async init(workersPoolSize = 1) {\n      return Promise.all(Array(workersPoolSize).fill().map(addWorker));\n    },\n    async getIdleWorker() {\n      for (const id of idleWorkerIds) {\n        return markWorkerIdBusy(id);\n      }\n\n      return new Promise(resolve => idleWorkerListenersQueue.add(w => {\n        resolve(w);\n      }));\n    },\n    async killWorkerId(workerId, skipReplacement = false) {\n      if (!workerIdToWorker.has(workerId)) return;\n      \n      const worker = workerIdToWorker.get(workerId);\n      workerIdToWorker.delete(worker.id);\n      idleWorkerIds.delete(worker.id);\n      \n      await worker.terminate();\n      if (skipReplacement) return;\n\n      await addWorker();\n    },\n    freeWorkerId(workerId) {\n      if (!workerIdToWorker.has(workerId)) return;\n\n      idleWorkerIds.add(workerId);\n      \n      if (!idleWorkerListenersQueue.length) return;\n      const listener = idleWorkerListenersQueue.pop();\n      listener(markWorkerIdBusy(workerId));\n    },\n    async terminate() {\n      idleWorkerIds.clear();\n      idleWorkerListenersQueue.clear();\n      const workers = [...workerIdToWorker.values()];\n      workerIdToWorker.clear();\n\n      return await Promise.all(workers.map(worker => worker.terminate()));\n    },\n  }\n\n  async function addWorker() {\n    const worker = createWorker({\n      workerPath: process.env.PUBLIC_URL + '/tesseract/worker.min.js',\n      workerBlobURL: false,\n      corePath: process.env.PUBLIC_URL + `/tesseract/tesseract-core.${typeof WebAssembly === 'object' ? 'wasm' : 'asm'}.js`,\n    });\n    await worker.load();\n    await worker.loadLanguage('eng');\n    await worker.initialize('eng');\n    await worker.setParameters({\n      tessjs_create_hocr: '0',\n      tessjs_create_tsv: '0',\n    });\n    workerIdToWorker.set(worker.id, worker);\n    idleWorkerIds.add(worker.id);\n\n    return worker;\n  }\n\n  function markWorkerIdBusy(workerId) {\n    const worker = workerIdToWorker.get(workerId);\n    idleWorkerIds.delete(workerId);\n\n    return worker;\n  }\n}\n\nfunction makeQueue() {\n  let head = undefined;\n  let tail = undefined;\n  let length = 0;\n\n  return {\n    add(value) {\n      const node = { value };\n      if (!head) head = node;\n      if (!tail) tail = node;\n\n      tail.next = node;\n      tail = node;\n\n      length += 1;\n    },\n    pop() {\n      if (!head) return head;\n\n      const returning = head;\n      head = head.next;\n      if (!head) tail = undefined;\n      length -= 1;\n\n      return returning.value;\n    },\n    clear() {\n      head = undefined;\n      tail = undefined;\n      length = 0;\n    },\n    peek: () => head?.value,\n    get length() { return length },\n  }\n}\n","import React, { useContext, useEffect, useState } from \"react\";\nimport createCancelableScheduler from \"./createCancelableScheduler\";\n\nconst ImageTextRecognitionContext = React.createContext();\nImageTextRecognitionContext.displayName = \"ImageTextRecognitionContext\";\n\nexport function ImageTextRecognitionProvider({ children, numWorkers = 20 }) {\n  const [readyScheduler, setReadyScheduler] = useState();\n\n  useEffect(() => {\n    const scheduler = createCancelableScheduler({workersPoolSize: numWorkers});\n    scheduler.init();\n    setReadyScheduler(scheduler);\n  }, [numWorkers]);\n\n  return <ImageTextRecognitionContext.Provider value={readyScheduler}>\n    {readyScheduler && children}\n  </ImageTextRecognitionContext.Provider>;\n};\n\nexport default function useImageTextRecognition(imageLike, options) {\n  const scheduler = useContext(ImageTextRecognitionContext);\n  const [result, setResult] = useState();\n\n  useEffect(() => {\n    if (!scheduler || !imageLike) return;\n    \n    let didCancel = false;\n    const [resultPromise, cancelFn] = scheduler.addRecognitionJob(imageLike, options);\n\n    (async () => {\n      const { data } = await resultPromise;\n      if (didCancel) return;\n\n      setResult(data);\n    })();\n    \n    return () => {\n      didCancel = true;\n      cancelFn();\n    };\n  }, [imageLike, options, scheduler]);\n\n  return result;\n}\n","import { LinearProgress } from '@material-ui/core';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport React, { useEffect, useState } from \"react\";\nimport useImageTextRecognition from \"./useImageTextRecognition\";\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    margin: theme.spacing(1),\n  },\n  media: {\n    width: 480,\n    height: 270,\n  },\n}));\n\nexport default function Stream({ stream, gameName }) {\n  const classes = useStyles();\n  const { blob, imgSrc } = useImgFetch(stream.thumbnail_url);\n  const result = useImageTextRecognition(blob);\n  const isResultPending = !result;\n  const isLikelyLobby = result?.lines.some(l => l.text.match(/everybody|to start|same players|room|on your/i));\n\n  if (!isResultPending && !isLikelyLobby) return <></>;\n\n  const twitchStreamUrl = `https://twitch.tv/${stream.user_name.toLowerCase()}`;\n\n  return <>\n    <Card className={classes.root} style={{ opacity: isLikelyLobby ? 1 : 0.3, order: isLikelyLobby ? 0 : 1 }}>\n      <CardActionArea href={twitchStreamUrl} target=\"_blank\" rel=\"noopener noreferrer\">\n        <CardMedia\n          className={classes.media}\n          image={imgSrc || \"https://via.placeholder.com/480x270?text=%E2%80%A6\"}\n          title={`Click to watch ${stream.user_name} on Twitch`}\n        />\n        {isResultPending && <LinearProgress />}\n        <CardContent style={{display: \"flex\", flexDirection: \"row\"}}>\n          <Typography variant=\"body1\" color=\"textSecondary\" component=\"span\">\n            {gameName || stream.user_name}\n          </Typography>\n          <span style={{flex: 1}}/>\n          <Typography variant=\"body1\" color=\"textSecondary\" component=\"span\">\n            watching now: {stream.viewer_count}\n          </Typography>\n        </CardContent>\n      </CardActionArea>\n    </Card>\n  </>;\n}\n\nfunction useImgFetch(thumbnailUrl) {\n  const [result, setResult] = useState({});\n\n  useEffect(() => {\n    if (!thumbnailUrl) return;\n\n    let didCancel = false;\n    (async () => {\n      const result = await fetchImg(thumbnailUrl);\n      if (didCancel) return;\n\n      setResult(result);\n    })();\n\n    return () => didCancel = true;\n  }, [thumbnailUrl]);\n\n  return result;\n}\n\nconst MAX_ACCEPTABLE_AGE_IN_SECONDS = 20;\nconst MAX_RETRIES = 8;\nasync function fetchImg(thumbnailUrl, width = 1920, height = 1080, retryCount = 0) {\n  const url = thumbnailUrl.replace(\"{width}\", width).replace(\"{height}\", height);\n  const resp = await fetch(url, {cache: \"reload\"});\n  const isCached = ageOfResourceInSeconds(resp.headers) > MAX_ACCEPTABLE_AGE_IN_SECONDS;\n\n  if (isCached && retryCount < MAX_RETRIES) return fetchImg(thumbnailUrl, width + 1, height, retryCount + 1);\n\n  const blob = await resp.blob();\n  const imgSrc = window.URL.createObjectURL(blob);\n\n  return { blob, imgSrc };\n}\n\nfunction getMaxAgeInSeconds(headers) {\n  const defaultAgeInSeconds = 300;\n  const cacheControl = headers.get(\"cache-control\");\n  if (!cacheControl) return defaultAgeInSeconds;\n\n  const maxAgeStr = new URLSearchParams(cacheControl).get(\"max-age\");\n  if (!maxAgeStr) return defaultAgeInSeconds;\n\n  return +maxAgeStr;\n}\n\nfunction ageOfResourceInSeconds(headers) {\n  const maxAgeInMs = getMaxAgeInSeconds(headers) * 1000;\n  const expiryInMs = new Date(headers.get(\"expires\") || Date.now()).getTime();\n  const resourceCreatedAt = expiryInMs - maxAgeInMs;\n  const timeNow = Date.now();\n\n  return (timeNow - resourceCreatedAt) / 1000;\n}\n","function makeTwitchApi(clientId) {\n  let authToken = \"\";\n\n  const makeAuthHeaders = () => ({\n    \"Client-ID\": clientId,\n    \"Authorization\": `Bearer ${authToken}`,\n  });\n\n  return {\n    async getStreams(gameIds, afterCursor) {\n      const params = new URLSearchParams();\n      gameIds.forEach(gameId => params.append(\"game_id\", gameId));\n      params.append(\"first\", \"100\");\n      afterCursor && params.append(\"after\", afterCursor);\n\n      const resp = await fetch(\"https://api.twitch.tv/helix/streams?\" + params, {\n        headers: makeAuthHeaders(),\n      })\n      const { data, pagination } = await resp.json();\n\n      return {\n        streams: data,\n        fetchNext: async () => {\n          return this.getStreams(gameIds, pagination.cursor);\n        },\n      };\n    },\n    async getGames(names) {\n      const params = new URLSearchParams();\n      names.forEach(name => params.append(\"name\", name));\n      const resp = await fetch(\"https://api.twitch.tv/helix/games?\" + params, {\n        headers: makeAuthHeaders(),\n      });\n      const { data } = await resp.json();\n\n      return data || [];\n    },\n    getAuthUrl() {\n      const params = new URLSearchParams();\n      params.append(\"client_id\", clientId);\n      params.append(\"redirect_uri\", window.location.origin + window.location.pathname);\n      params.append(\"response_type\", \"token\");\n      params.append(\"scope\", \"\");\n\n      return \"https://id.twitch.tv/oauth2/authorize?\" + params;\n    },\n    handleAuthResponse() {\n      const params = new URLSearchParams(window.location.hash.slice(1))\n      const token = params.get(\"access_token\");\n      if (!token) return;\n\n      authToken = token;\n    },\n    hasAuth() {\n      return !!authToken;\n    }\n  };\n};\n\nexport default makeTwitchApi;\n","import React, { useContext } from \"react\";\nimport makeTwitchApi from \"./makeTwitchApi\";\n\nconst TwitchApiContext = React.createContext({\n  twitchApi: makeTwitchApi(\"r2000vj19f088smr120ej452wxlkrt\"),\n});\n\nexport default TwitchApiContext;\n\nexport function useTwitchApi() {\n  const { twitchApi } = useContext(TwitchApiContext);\n  twitchApi.handleAuthResponse();\n\n  return twitchApi;\n}\n","import { Button } from \"@material-ui/core\";\nimport React, { useEffect, useState } from \"react\";\nimport GamesSelector from \"./GamesSelector\";\nimport Stream from \"./Stream\";\nimport { useTwitchApi } from \"./TwitchApiContext\";\nimport { ImageTextRecognitionProvider } from \"./useImageTextRecognition\";\n\nconst GAME_NAMES = [\n  \"DRAWFUL 2\",\n  \"THE JACKBOX PARTY PACK\",\n  \"THE JACKBOX PARTY PACK 2\",\n  \"THE JACKBOX PARTY PACK 3\",\n  \"THE JACKBOX PARTY PACK 4\",\n  \"THE JACKBOX PARTY PACK 5\",\n  \"THE JACKBOX PARTY PACK 6\",\n];\n\nexport default function SignedInApp() {\n  const api = useTwitchApi();\n  const [selectedNames, setSelectedNames] = useState(new Set([]))\n  const [games, setGames] = useState([]);\n  const [gameIdToName, setGameIdToName] = useState(new Map());\n  const [streams, setStreams] = useState([]);\n  const [fetchNext, setFetchNext] = useState(() => () => undefined);\n\n  useEffect(() => {\n    if (!selectedNames.size) {\n      setGames([]);\n      setGameIdToName(new Map());\n      return;\n    }\n\n    let didCancel = false;\n    (async () => {\n      const incGames = await api.getGames(selectedNames);\n      if (didCancel) return;\n\n      setGames(incGames);\n      setGameIdToName(new Map(incGames.map(({ id, name }) => [id, name])));\n    })();\n\n    return () => didCancel = true;\n  }, [api, selectedNames])\n\n  useEffect(() => {\n    if (!games.length) {\n      setStreams([]);\n      setFetchNext(() => () => undefined);\n      return;\n    }\n\n    let didCancel = false;\n    (async () => {\n      const result = await api.getStreams(games.map(g => g.id));\n      if (didCancel) return;\n      \n      handleResult(result);\n    })();\n\n    function handleResult(result, concat = false) {\n      concat\n        ? setStreams(prev => uniqueIds([...prev, ...result.streams]))\n        : setStreams(result.streams);\n      setFetchNext(() => async () => handleResult(await result.fetchNext(), true));\n    }\n\n    return () => didCancel = true;\n  }, [api, games]);\n\n  return <>\n    <ImageTextRecognitionProvider>\n      <GamesSelector\n        names={GAME_NAMES}\n        selectedNames={selectedNames}\n        onCheckboxChange={onGameSelectChange}\n      />\n      <div>Checking {streams.length} streams…</div>\n      <div style={{display: \"flex\", flexWrap: \"wrap\"}}>\n        {streams.map(stream => <Stream key={stream.id} stream={stream} gameName={gameIdToName.get(stream.game_id)} />)}\n      </div>\n      <Button variant=\"contained\" size=\"large\" color=\"primary\" onClick={fetchNext} style={{ position: \"fixed\", bottom: 0 }}>\n        SHOW ME MOAR\n      </Button>\n    </ImageTextRecognitionProvider>\n  </>;\n\n  function onGameSelectChange({ name, checked }) {\n    setSelectedNames(prevNames => {\n      const names = new Set(prevNames);\n      checked ? names.add(name) : names.delete(name);\n\n      return names;\n    });\n  }\n}\n\nfunction uniqueIds(items) {\n  const idToItem = new Map();\n  for (const item of items) {\n    idToItem.set(item.id, item);\n  }\n\n  return [...idToItem.values()];\n}\n","import { Button } from '@material-ui/core';\nimport React from 'react';\nimport { hot } from 'react-hot-loader/root';\nimport './App.css';\nimport SignedInApp from './SignedInApp';\nimport { useTwitchApi } from './TwitchApiContext';\n\nfunction App() {\n  const api = useTwitchApi();\n\n  return (\n    <div className=\"App\">\n      {\n        api.hasAuth()\n          ? <SignedInApp />\n          : <Button color=\"primary\" variant=\"contained\" size=\"large\" href={api.getAuthUrl()}>Login</Button>\n      }\n    </div>\n  );\n}\n\nexport default process.env.NODE_ENV === \"development\" ? hot(App) : App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}